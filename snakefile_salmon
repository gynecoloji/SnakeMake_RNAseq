import os
import glob

# Automatically detect samples
SAMPLES, = glob_wildcards("results/trimmed/{sample}_R1.trimmed.fastq.gz")

rule all:
    input:
        expand("results/quants/{sample}_quant/quant.sf", sample=SAMPLES),
        expand("results/quants_decoy/{sample}_quant/quant.sf", sample=SAMPLES)

# Rule 1: Salmon quantification (standard index)
rule salmon_quant:
    input:
        r1="results/trimmed/{sample}_R1.trimmed.fastq.gz",
        r2="results/trimmed/{sample}_R2.trimmed.fastq.gz"
    output:
        directory("results/quants/{sample}_quant")
    log:
        "logs/salmon/{sample}_salmon.log"
    threads: 20
    params:
        index="ref/Salmon_index_Grch38"
    conda:
        "envs/salmon.yaml"
    shell:
        """
        mkdir -p results/quants logs/salmon
        salmon quant \
            -i {params.index} \
            -l A \
            -1 {input.r1} \
            -2 {input.r2} \
            -p {threads} \
            --validateMappings \
            -o {output} > {log} 2>&1
        """

# Rule 2: Salmon quantification (decoy-aware index)
rule salmon_decoy_quant:
    input:
        r1="results/trimmed/{sample}_R1.trimmed.fastq.gz",
        r2="results/trimmed/{sample}_R2.trimmed.fastq.gz"
    output:
        directory("results/quants_decoy/{sample}_quant")
    log:
        "logs/salmon/{sample}_salmon_decoy.log"
    threads: 20
    params:
        index="ref/Salmon_index_decoy_Grch38"
    conda:
        "envs/salmon.yaml"
    shell:
        """
        mkdir -p results/quants_decoy logs/salmon
        salmon quant \
            -i {params.index} \
            -l A \
            -1 {input.r1} \
            -2 {input.r2} \
            -p {threads} \
            --validateMappings \
            -o {output} > {log} 2>&1
        """
